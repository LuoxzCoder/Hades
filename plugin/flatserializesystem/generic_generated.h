// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_GENERIC_HFBS_H_
#define FLATBUFFERS_GENERATED_GENERIC_HFBS_H_

#include "flatbuffers/flatbuffers.h"

namespace hfbs {

struct Member;

struct TNull;

struct TBool;

struct TShort;

struct TUShort;

struct TInt;

struct TUInt;

struct TFloat;

struct TDouble;

struct TInt64;

struct TUInt64;

struct TString;

struct TNative;

struct TClass;

enum Type {
  Type_NONE = 0,
  Type_TNull = 1,
  Type_TBool = 2,
  Type_TShort = 3,
  Type_TUShort = 4,
  Type_TInt = 5,
  Type_TUInt = 6,
  Type_TFloat = 7,
  Type_TDouble = 8,
  Type_TString = 9,
  Type_TNative = 10,
  Type_TClass = 11,
  Type_TInt64 = 12,
  Type_TUInt64 = 13,
  Type_MIN = Type_NONE,
  Type_MAX = Type_TUInt64
};

inline const char **EnumNamesType() {
  static const char *names[] = { "NONE", "TNull", "TBool", "TShort", "TUShort", "TInt", "TUInt", "TFloat", "TDouble", "TString", "TNative", "TClass", "TInt64", "TUInt64", nullptr };
  return names;
}

inline const char *EnumNameType(Type e) { return EnumNamesType()[static_cast<int>(e)]; }

inline bool VerifyType(flatbuffers::Verifier &verifier, const void *union_obj, Type type);

struct Member FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_KEY_TYPE = 4,
    VT_KEY = 6,
    VT_VALUE_TYPE = 8,
    VT_VALUE = 10
  };
  Type key_type() const { return static_cast<Type>(GetField<uint8_t>(VT_KEY_TYPE, 0)); }
  const void *key() const { return GetPointer<const void *>(VT_KEY); }
  Type value_type() const { return static_cast<Type>(GetField<uint8_t>(VT_VALUE_TYPE, 0)); }
  const void *value() const { return GetPointer<const void *>(VT_VALUE); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_KEY_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_KEY) &&
           VerifyType(verifier, key(), key_type()) &&
           VerifyField<uint8_t>(verifier, VT_VALUE_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_VALUE) &&
           VerifyType(verifier, value(), value_type()) &&
           verifier.EndTable();
  }
};

struct MemberBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key_type(Type key_type) { fbb_.AddElement<uint8_t>(Member::VT_KEY_TYPE, static_cast<uint8_t>(key_type), 0); }
  void add_key(flatbuffers::Offset<void> key) { fbb_.AddOffset(Member::VT_KEY, key); }
  void add_value_type(Type value_type) { fbb_.AddElement<uint8_t>(Member::VT_VALUE_TYPE, static_cast<uint8_t>(value_type), 0); }
  void add_value(flatbuffers::Offset<void> value) { fbb_.AddOffset(Member::VT_VALUE, value); }
  MemberBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MemberBuilder &operator=(const MemberBuilder &);
  flatbuffers::Offset<Member> Finish() {
    auto o = flatbuffers::Offset<Member>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<Member> CreateMember(flatbuffers::FlatBufferBuilder &_fbb,
   Type key_type = Type_NONE,
   flatbuffers::Offset<void> key = 0,
   Type value_type = Type_NONE,
   flatbuffers::Offset<void> value = 0) {
  MemberBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_key(key);
  builder_.add_value_type(value_type);
  builder_.add_key_type(key_type);
  return builder_.Finish();
}

struct TNull FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct TNullBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  TNullBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TNullBuilder &operator=(const TNullBuilder &);
  flatbuffers::Offset<TNull> Finish() {
    auto o = flatbuffers::Offset<TNull>(fbb_.EndTable(start_, 0));
    return o;
  }
};

inline flatbuffers::Offset<TNull> CreateTNull(flatbuffers::FlatBufferBuilder &_fbb) {
  TNullBuilder builder_(_fbb);
  return builder_.Finish();
}

struct TBool FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  bool value() const { return GetField<uint8_t>(VT_VALUE, 0) != 0; }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct TBoolBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(bool value) { fbb_.AddElement<uint8_t>(TBool::VT_VALUE, static_cast<uint8_t>(value), 0); }
  TBoolBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TBoolBuilder &operator=(const TBoolBuilder &);
  flatbuffers::Offset<TBool> Finish() {
    auto o = flatbuffers::Offset<TBool>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<TBool> CreateTBool(flatbuffers::FlatBufferBuilder &_fbb,
   bool value = false) {
  TBoolBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct TShort FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  int16_t value() const { return GetField<int16_t>(VT_VALUE, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct TShortBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(int16_t value) { fbb_.AddElement<int16_t>(TShort::VT_VALUE, value, 0); }
  TShortBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TShortBuilder &operator=(const TShortBuilder &);
  flatbuffers::Offset<TShort> Finish() {
    auto o = flatbuffers::Offset<TShort>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<TShort> CreateTShort(flatbuffers::FlatBufferBuilder &_fbb,
   int16_t value = 0) {
  TShortBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct TUShort FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  uint16_t value() const { return GetField<uint16_t>(VT_VALUE, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct TUShortBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(uint16_t value) { fbb_.AddElement<uint16_t>(TUShort::VT_VALUE, value, 0); }
  TUShortBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TUShortBuilder &operator=(const TUShortBuilder &);
  flatbuffers::Offset<TUShort> Finish() {
    auto o = flatbuffers::Offset<TUShort>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<TUShort> CreateTUShort(flatbuffers::FlatBufferBuilder &_fbb,
   uint16_t value = 0) {
  TUShortBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct TInt FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  int32_t value() const { return GetField<int32_t>(VT_VALUE, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct TIntBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(int32_t value) { fbb_.AddElement<int32_t>(TInt::VT_VALUE, value, 0); }
  TIntBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TIntBuilder &operator=(const TIntBuilder &);
  flatbuffers::Offset<TInt> Finish() {
    auto o = flatbuffers::Offset<TInt>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<TInt> CreateTInt(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t value = 0) {
  TIntBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct TUInt FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  uint32_t value() const { return GetField<uint32_t>(VT_VALUE, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct TUIntBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(uint32_t value) { fbb_.AddElement<uint32_t>(TUInt::VT_VALUE, value, 0); }
  TUIntBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TUIntBuilder &operator=(const TUIntBuilder &);
  flatbuffers::Offset<TUInt> Finish() {
    auto o = flatbuffers::Offset<TUInt>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<TUInt> CreateTUInt(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t value = 0) {
  TUIntBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct TFloat FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  float value() const { return GetField<float>(VT_VALUE, 0.0f); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct TFloatBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(float value) { fbb_.AddElement<float>(TFloat::VT_VALUE, value, 0.0f); }
  TFloatBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TFloatBuilder &operator=(const TFloatBuilder &);
  flatbuffers::Offset<TFloat> Finish() {
    auto o = flatbuffers::Offset<TFloat>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<TFloat> CreateTFloat(flatbuffers::FlatBufferBuilder &_fbb,
   float value = 0.0f) {
  TFloatBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct TDouble FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  double value() const { return GetField<double>(VT_VALUE, 0.0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct TDoubleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(double value) { fbb_.AddElement<double>(TDouble::VT_VALUE, value, 0.0); }
  TDoubleBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TDoubleBuilder &operator=(const TDoubleBuilder &);
  flatbuffers::Offset<TDouble> Finish() {
    auto o = flatbuffers::Offset<TDouble>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<TDouble> CreateTDouble(flatbuffers::FlatBufferBuilder &_fbb,
   double value = 0.0) {
  TDoubleBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct TInt64 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  int64_t value() const { return GetField<int64_t>(VT_VALUE, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct TInt64Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(int64_t value) { fbb_.AddElement<int64_t>(TInt64::VT_VALUE, value, 0); }
  TInt64Builder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TInt64Builder &operator=(const TInt64Builder &);
  flatbuffers::Offset<TInt64> Finish() {
    auto o = flatbuffers::Offset<TInt64>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<TInt64> CreateTInt64(flatbuffers::FlatBufferBuilder &_fbb,
   int64_t value = 0) {
  TInt64Builder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct TUInt64 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  uint64_t value() const { return GetField<uint64_t>(VT_VALUE, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct TUInt64Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(uint64_t value) { fbb_.AddElement<uint64_t>(TUInt64::VT_VALUE, value, 0); }
  TUInt64Builder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TUInt64Builder &operator=(const TUInt64Builder &);
  flatbuffers::Offset<TUInt64> Finish() {
    auto o = flatbuffers::Offset<TUInt64>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<TUInt64> CreateTUInt64(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t value = 0) {
  TUInt64Builder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct TString FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::String *value() const { return GetPointer<const flatbuffers::String *>(VT_VALUE); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct TStringBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::String> value) { fbb_.AddOffset(TString::VT_VALUE, value); }
  TStringBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TStringBuilder &operator=(const TStringBuilder &);
  flatbuffers::Offset<TString> Finish() {
    auto o = flatbuffers::Offset<TString>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<TString> CreateTString(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> value = 0) {
  TStringBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct TNative FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_FACTOR = 4,
    VT_VALUE = 6
  };
  int32_t factor() const { return GetField<int32_t>(VT_FACTOR, 0); }
  const flatbuffers::Vector<uint8_t> *value() const { return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_VALUE); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_FACTOR) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct TNativeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_factor(int32_t factor) { fbb_.AddElement<int32_t>(TNative::VT_FACTOR, factor, 0); }
  void add_value(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value) { fbb_.AddOffset(TNative::VT_VALUE, value); }
  TNativeBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TNativeBuilder &operator=(const TNativeBuilder &);
  flatbuffers::Offset<TNative> Finish() {
    auto o = flatbuffers::Offset<TNative>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<TNative> CreateTNative(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t factor = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value = 0) {
  TNativeBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_factor(factor);
  return builder_.Finish();
}

struct TClass FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MEMBERS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Member>> *members() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Member>> *>(VT_MEMBERS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MEMBERS) &&
           verifier.Verify(members()) &&
           verifier.VerifyVectorOfTables(members()) &&
           verifier.EndTable();
  }
};

struct TClassBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_members(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Member>>> members) { fbb_.AddOffset(TClass::VT_MEMBERS, members); }
  TClassBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TClassBuilder &operator=(const TClassBuilder &);
  flatbuffers::Offset<TClass> Finish() {
    auto o = flatbuffers::Offset<TClass>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<TClass> CreateTClass(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Member>>> members = 0) {
  TClassBuilder builder_(_fbb);
  builder_.add_members(members);
  return builder_.Finish();
}

inline bool VerifyType(flatbuffers::Verifier &verifier, const void *union_obj, Type type) {
  switch (type) {
    case Type_NONE: return true;
    case Type_TNull: return verifier.VerifyTable(reinterpret_cast<const TNull *>(union_obj));
    case Type_TBool: return verifier.VerifyTable(reinterpret_cast<const TBool *>(union_obj));
    case Type_TShort: return verifier.VerifyTable(reinterpret_cast<const TShort *>(union_obj));
    case Type_TUShort: return verifier.VerifyTable(reinterpret_cast<const TUShort *>(union_obj));
    case Type_TInt: return verifier.VerifyTable(reinterpret_cast<const TInt *>(union_obj));
    case Type_TUInt: return verifier.VerifyTable(reinterpret_cast<const TUInt *>(union_obj));
    case Type_TFloat: return verifier.VerifyTable(reinterpret_cast<const TFloat *>(union_obj));
    case Type_TDouble: return verifier.VerifyTable(reinterpret_cast<const TDouble *>(union_obj));
    case Type_TString: return verifier.VerifyTable(reinterpret_cast<const TString *>(union_obj));
    case Type_TNative: return verifier.VerifyTable(reinterpret_cast<const TNative *>(union_obj));
    case Type_TClass: return verifier.VerifyTable(reinterpret_cast<const TClass *>(union_obj));
    case Type_TInt64: return verifier.VerifyTable(reinterpret_cast<const TInt64 *>(union_obj));
    case Type_TUInt64: return verifier.VerifyTable(reinterpret_cast<const TUInt64 *>(union_obj));
    default: return false;
  }
}

inline const hfbs::TClass *GetTClass(const void *buf) { return flatbuffers::GetRoot<hfbs::TClass>(buf); }

inline bool VerifyTClassBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<hfbs::TClass>(); }

inline void FinishTClassBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<hfbs::TClass> root) { fbb.Finish(root); }

}  // namespace hfbs

#endif  // FLATBUFFERS_GENERATED_GENERIC_HFBS_H_
