/********************************************************************
**       This head file is generated by program,                   **
**            Please do not change it directly.                    **
**       build time : 2017-06-12 09:28:03                          **
********************************************************************/

#ifndef __IDIP_H__
#define __IDIP_H__


#if !defined(_WIN32) && !defined(_WIN64)
    #include <stdint.h>
    #include <inttypes.h>
#else
    typedef signed char    int8_t;
    typedef signed short   int16_t;
    typedef signed int     int32_t;
    typedef unsigned char  uint8_t;
    typedef unsigned short uint16_t;
    typedef unsigned int   uint32_t;
    #if _MSC_VER >= 1300
        typedef unsigned long long uint64_t;
        typedef long long          int64_t;
    #else 
        typedef unsigned __int64 uint64_t;
        typedef __int64          int64_t;
    #endif 
#endif


/* IDIP命令编码 */
#define IDIP_QUERY_USR_INFO_REQ                    0x1001    /* 查询个人信息请求 */
#define IDIP_QUERY_USR_INFO_RSP                    0x1002    /* 查询个人信息应答 */
#define IDIP_DO_SEND_NOTICE_REQ                    0x1003    /* 发布公告请求 */
#define IDIP_DO_SEND_NOTICE_RSP                    0x1004    /* 发布公告应答 */
#define IDIP_QUERY_NOTICE_REQ                      0x1005    /* 查询公告请求 */
#define IDIP_QUERY_NOTICE_RSP                      0x1006    /* 查询公告应答 */
#define IDIP_DO_DEL_NOTICE_REQ                     0x1007    /* 删除公告请求 */
#define IDIP_DO_DEL_NOTICE_RSP                     0x1008    /* 删除公告应答 */
#define IDIP_DO_SEND_ROLLING_MSG_REQ               0x1009    /* 发走马灯请求 */
#define IDIP_DO_SEND_ROLLING_MSG_RSP               0x100a    /* 发走马灯应答 */
#define IDIP_QUERY_ROLLING_REQ                     0x100b    /* 查询走马灯请求 */
#define IDIP_QUERY_ROLLING_RSP                     0x100c    /* 查询走马灯应答 */
#define IDIP_DO_DEL_ROLLING_REQ                    0x100d    /* 删除走马灯请求 */
#define IDIP_DO_DEL_ROLLING_RSP                    0x100e    /* 删除走马灯应答 */
#define IDIP_DO_SEND_MAIL_REQ                      0x100f    /* 发送邮件（送道具）请求 */
#define IDIP_DO_SEND_MAIL_RSP                      0x1010    /* 发送邮件（送道具）应答 */
#define IDIP_DO_GLOBAL_FUNCTION_SWITCH_REQ         0x1041    /* 全局功能开关请求 */
#define IDIP_DO_GLOBAL_FUNCTION_SWITCH_RSP         0x1042    /* 全局功能开关应答 */
#define IDIP_DO_GLOBAL_INCOME_SWITCH_REQ           0x1043    /* 全局功能收益开关请求 */
#define IDIP_DO_GLOBAL_INCOME_SWITCH_RSP           0x1044    /* 全局功能收益开关应答 */
#define IDIP_DO_DEL_ITEM_REQ                       0x1045    /* 删除道具请求 */
#define IDIP_DO_DEL_ITEM_RSP                       0x1046    /* 删除道具应答 */
#define IDIP_DO_DEL_PET_REQ                        0x1047    /* 删除珍兽请求 */
#define IDIP_DO_DEL_PET_RSP                        0x1048    /* 删除珍兽应答 */
#define IDIP_QUERY_ACTIVITY_HAS_DONE_REQ           0x104b    /* 活动是否完成请求 */
#define IDIP_QUERY_ACTIVITY_HAS_DONE_RSP           0x104c    /* 活动是否完成应答 */
#define IDIP_QUERY_GUILD_INFO_REQ                  0x104d    /* 获取玩家公会信息请求 */
#define IDIP_QUERY_GUILD_INFO_RSP                  0x104e    /* 获取玩家公会信息应答 */
#define IDIP_QUERY_GUILD_FUZZY_REQ                 0x104f    /* 公会名模糊查询请求 */
#define IDIP_QUERY_GUILD_FUZZY_RSP                 0x1050    /* 公会名模糊查询应答 */
#define IDIP_QUERY_ID_TO_GUILD_INFO_REQ            0x1051    /* 根据公会id获取公会信息请求 */
#define IDIP_QUERY_ID_TO_GUILD_INFO_RSP            0x1052    /* 根据公会id获取公会信息应答 */
#define IDIP_QUERY_ID_TO_GUILD_PLAYERS_REQ         0x1053    /* 查询公会id获取成员信息列表请求 */
#define IDIP_QUERY_ID_TO_GUILD_PLAYERS_RSP         0x1054    /* 查询公会id获取成员信息列表应答 */
#define IDIP_DO_SET_NO_PLAY_REQ                    0x1055    /* 成长守护（禁玩与解禁）请求 */
#define IDIP_DO_SET_NO_PLAY_RSP                    0x1056    /* 成长守护（禁玩与解禁）应答 */
#define IDIP_QUERY_ROLEID_TO_OPENID_REQ            0x1057    /* 角色id反查openid请求 */
#define IDIP_QUERY_ROLEID_TO_OPENID_RSP            0x1058    /* 角色id反查openid应答 */
#define IDIP_DO_SWITCH_SCENE_REQ                   0x1059    /* 玩家切换位置和场景请求 */
#define IDIP_DO_SWITCH_SCENE_RSP                   0x105a    /* 玩家切换位置和场景应答 */
#define IDIP_QUERY_BAG_STORE_REQ                   0x105b    /* 根据openid、物品id查询背包和仓库是否有请求 */
#define IDIP_QUERY_BAG_STORE_RSP                   0x105c    /* 根据openid、物品id查询背包和仓库是否有应答 */
#define IDIP_AQ_DO_BAN_CHAT_REQ                    0x1035    /* 禁言（AQ）请求 */
#define IDIP_AQ_DO_BAN_CHAT_RSP                    0x1036    /* 禁言（AQ）应答 */
#define IDIP_AQ_DO_BAN_USER_REQ                    0x1031    /* 封号（AQ）请求 */
#define IDIP_AQ_DO_BAN_USER_RSP                    0x1032    /* 封号（AQ）应答 */
#define IDIP_AQ_QUERY_OPENID_INFO_REQ              0x1011    /* 查询openid基本信息（AQ）请求 */
#define IDIP_AQ_QUERY_OPENID_INFO_RSP              0x1012    /* 查询openid基本信息（AQ）应答 */
#define IDIP_AQ_DO_UPDATE_COIN_REQ                 0x1017    /* 修改游戏币数量（AQ）请求 */
#define IDIP_AQ_DO_UPDATE_COIN_RSP                 0x1018    /* 修改游戏币数量（AQ）应答 */
#define IDIP_AQ_DO_CLEAR_SCORE_REQ                 0x101b    /* 清零游戏分数（AQ）请求 */
#define IDIP_AQ_DO_CLEAR_SCORE_RSP                 0x101c    /* 清零游戏分数（AQ）应答 */
#define IDIP_AQ_DO_SET_SCORE_REQ                   0x101d    /* 设置游戏分数（AQ）请求 */
#define IDIP_AQ_DO_SET_SCORE_RSP                   0x101e    /* 设置游戏分数（AQ）应答 */
#define IDIP_AQ_DO_INITIAL_USER_REQ                0x1029    /* 初始化帐号接口（AQ）请求 */
#define IDIP_AQ_DO_INITIAL_USER_RSP                0x102a    /* 初始化帐号接口（AQ）应答 */
#define IDIP_AQ_DO_ZERO_PROFIT_REQ                 0x102b    /* 零收益（AQ）请求 */
#define IDIP_AQ_DO_ZERO_PROFIT_RSP                 0x102c    /* 零收益（AQ）应答 */
#define IDIP_AQ_DO_BAN_PLAY_REQ                    0x102d    /* 禁止指定玩法（AQ）请求 */
#define IDIP_AQ_DO_BAN_PLAY_RSP                    0x102e    /* 禁止指定玩法（AQ）应答 */
#define IDIP_AQ_DO_BAN_RANKING_REQ                 0x1021    /* 禁止参与排行榜接口（实时榜）（AQ）请求 */
#define IDIP_AQ_DO_BAN_RANKING_RSP                 0x1022    /* 禁止参与排行榜接口（实时榜）（AQ）应答 */
#define IDIP_AQ_DO_BAN_CHARAC_REQ                  0x1033    /* 封角色（AQ）请求 */
#define IDIP_AQ_DO_BAN_CHARAC_RSP                  0x1034    /* 封角色（AQ）应答 */
#define IDIP_AQ_DO_UNPUNISH_REQ                    0x103b    /* 解除处罚（AQ）请求 */
#define IDIP_AQ_DO_UNPUNISH_RSP                    0x103c    /* 解除处罚（AQ）应答 */
#define IDIP_AQ_QUERY_ROLE_INFO_REQ                0x1013    /* 查询帐号下角色信息（AQ）请求 */
#define IDIP_AQ_QUERY_ROLE_INFO_RSP                0x1014    /* 查询帐号下角色信息（AQ）应答 */
#define IDIP_AQ_DO_SEND_MESSAGE_REQ                0x1015    /* 发消息（AQ）请求 */
#define IDIP_AQ_DO_SEND_MESSAGE_RSP                0x1016    /* 发消息（AQ）应答 */
#define IDIP_AQ_DO_UPDATE_INGOT_REQ                0x1019    /* 修改元宝数量（AQ）请求 */
#define IDIP_AQ_DO_UPDATE_INGOT_RSP                0x101a    /* 修改元宝数量（AQ）应答 */
#define IDIP_AQ_QUERY_BOSS_WAR_INFO_REQ            0x101f    /* 查询Boss战当前信息（AQ）请求 */
#define IDIP_AQ_QUERY_BOSS_WAR_INFO_RSP            0x1020    /* 查询Boss战当前信息（AQ）应答 */
#define IDIP_AQ_DO_BAN_RANKING_OFFLINE_REQ         0x1023    /* 禁止参与排行榜接口（离线榜）（AQ）请求 */
#define IDIP_AQ_DO_BAN_RANKING_OFFLINE_RSP         0x1024    /* 禁止参与排行榜接口（离线榜）（AQ）应答 */
#define IDIP_AQ_QUERY_USER_SIGNATURE_NOTICE_REQ    0x1025    /* 查询用户签名和公会公告（AQ）请求 */
#define IDIP_AQ_QUERY_USER_SIGNATURE_NOTICE_RSP    0x1026    /* 查询用户签名和公会公告（AQ）应答 */
#define IDIP_AQ_DO_SET_SIGNATURE_NOTICE_REQ        0x1027    /* 设置用户签名和公会公告（AQ）请求 */
#define IDIP_AQ_DO_SET_SIGNATURE_NOTICE_RSP        0x1028    /* 设置用户签名和公会公告（AQ）应答 */
#define IDIP_AQ_DO_BAN_ALL_PLAY_REQ                0x102f    /* 禁止所有玩法（AQ）请求 */
#define IDIP_AQ_DO_BAN_ALL_PLAY_RSP                0x1030    /* 禁止所有玩法（AQ）应答 */
#define IDIP_AQ_DO_CLEAR_CHAT_REQ                  0x1037    /* 发言清除（AQ）请求 */
#define IDIP_AQ_DO_CLEAR_CHAT_RSP                  0x1038    /* 发言清除（AQ）应答 */
#define IDIP_AQ_DO_SEND_NOTICE_REQ                 0x1039    /* 发布公告（AQ）请求 */
#define IDIP_AQ_DO_SEND_NOTICE_RSP                 0x103a    /* 发布公告（AQ）应答 */
#define IDIP_AQ_DO_BAN_SPECIFIED_PLAY_REQ          0x103d    /* 禁止指定玩法（针对功能）（AQ）请求 */
#define IDIP_AQ_DO_BAN_SPECIFIED_PLAY_RSP          0x103e    /* 禁止指定玩法（针对功能）（AQ）应答 */
#define IDIP_AQ_DO_BAN_SPECIFIED_INCOME_REQ        0x103f    /* 禁止指定收益（AQ）请求 */
#define IDIP_AQ_DO_BAN_SPECIFIED_INCOME_RSP        0x1040    /* 禁止指定收益（AQ）应答 */
#define IDIP_AQ_DO_BIND_INCOME_REQ                 0x1049    /* 绑定收益（AQ）请求 */
#define IDIP_AQ_DO_BIND_INCOME_RSP                 0x104a    /* 绑定收益（AQ）应答 */

/* 系统宏 */
#define MAX_ROLENAME_LEN           64       /* 角色名称的长度 */
#define MAX_JOB_LEN                24       /* 职业的长度 */
#define MAX_LOCATION_LEN           64       /* 所在位置的长度 */
#define MAX_OPENID_LEN             64       /* openid的长度 */
#define MAX_USRLIST_NUM            20       /* 个人信息列表的数组长度 */
#define MAX_NOTICETITLE_LEN        512      /* 公告标题的长度 */
#define MAX_NOTICECONTENT_LEN      6750     /* 公告内容的长度 */
#define MAX_SERIAL_LEN             64       /* 流水号，由前端生成，不需填写的长度 */
#define MAX_RETMSG_LEN             100      /* 返回消息的长度 */
#define MAX_NOTICELIST_NUM         3        /* 公告列表的数组长度 */
#define MAX_TYPETEXT_LEN           96       /* 类型标题的长度 */
#define MAX_ROLLINGCONTENT_LEN     720      /* 走马灯内容的长度 */
#define MAX_ROLLINGMSGLIST_NUM     5        /* 走马灯列表的数组长度 */
#define MAX_MAILTITLE_LEN          256      /* 邮件标题的长度 */
#define MAX_MAILCONTENT_LEN        4098     /* 邮件内容的长度 */
#define MAX_ROLELIST_NUM           10       /* 角色信息列表的数组长度 */
#define MAX_MESSAGE_LEN            1024     /* 消息内容的长度 */
#define MAX_REASON_LEN             1024     /* 操作原因的长度 */
#define MAX_BANTEXT_LEN            1024     /* 禁止排行榜提示内容（文本）的长度 */
#define MAX_SIGNATURE_LEN          360      /* 用户签名的长度 */
#define MAX_GUILDNOTICE_LEN        450      /* 公会公告的长度 */
#define MAX_SETCONTENT_LEN         450      /* 设定内容的长度 */
#define MAX_TEXT_LEN               1024     /* 提示内容（文本）的长度 */
#define MAX_BANREASON_LEN          1024     /* 封号原因的长度 */
#define SERVICE_NAME_LENGTH        16       /* SERVICENAME的最大长度 */
#define AUTHENTICATE_LENGTH        32       /* 加密串的最大长度 */
#define ERROR_MSG_LENGTH           100      /* 错误码 */
#define IDIP_BODY_LENGTH           24000    /* 封装包包体的最大值, 基本的数据包的大小在15K以下，只有查询邮件列表这个数据量比较大，在23K左右 */
#define MAX_ROLEID_LEN             64       /* 角色id的长度 */
#define MAX_GUILDPURPOSE_LEN       1024     /* 工会宗旨的长度 */
#define MAX_GUILDMEMBERLIST_NUM    100      /* 公会成员列表的数组长度 */
#define MAX_GUILDNAME_LEN          64       /* 公会全名的长度 */
#define MAX_GUILDMATCHNAME_LEN     64       /* 公会名短串的长度 */
#define MAX_GUILDLIST_NUM          100      /* 公会列表的数组长度 */
#define MAX_MSG_LEN                1024     /* 禁玩原因或描述（支持文本信息，建议utf8编码）的长度 */


#ifdef __cplusplus
extern "C"{
#endif

struct tagIdipHeader;
typedef struct tagIdipHeader     IDIPHEADER;
typedef struct tagIdipHeader     *LPIDIPHEADER;

struct tagIdipDataPaket;
typedef struct tagIdipDataPaket     IDIPDATAPAKET;
typedef struct tagIdipDataPaket     *LPIDIPDATAPAKET;

struct tagSUsrInfo;
typedef struct tagSUsrInfo     SUSRINFO;
typedef struct tagSUsrInfo     *LPSUSRINFO;

struct tagSNoticeInfo;
typedef struct tagSNoticeInfo     SNOTICEINFO;
typedef struct tagSNoticeInfo     *LPSNOTICEINFO;

struct tagSRollingMsgInfo;
typedef struct tagSRollingMsgInfo     SROLLINGMSGINFO;
typedef struct tagSRollingMsgInfo     *LPSROLLINGMSGINFO;

struct tagSRoleInfo;
typedef struct tagSRoleInfo     SROLEINFO;
typedef struct tagSRoleInfo     *LPSROLEINFO;

struct tagSGuildInfo;
typedef struct tagSGuildInfo     SGUILDINFO;
typedef struct tagSGuildInfo     *LPSGUILDINFO;

struct tagSGuildMemberInfo;
typedef struct tagSGuildMemberInfo     SGUILDMEMBERINFO;
typedef struct tagSGuildMemberInfo     *LPSGUILDMEMBERINFO;

struct tagQueryUsrInfoReq;
typedef struct tagQueryUsrInfoReq     QUERYUSRINFOREQ;
typedef struct tagQueryUsrInfoReq     *LPQUERYUSRINFOREQ;

struct tagQueryUsrInfoRsp;
typedef struct tagQueryUsrInfoRsp     QUERYUSRINFORSP;
typedef struct tagQueryUsrInfoRsp     *LPQUERYUSRINFORSP;

struct tagDoSendNoticeReq;
typedef struct tagDoSendNoticeReq     DOSENDNOTICEREQ;
typedef struct tagDoSendNoticeReq     *LPDOSENDNOTICEREQ;

struct tagDoSendNoticeRsp;
typedef struct tagDoSendNoticeRsp     DOSENDNOTICERSP;
typedef struct tagDoSendNoticeRsp     *LPDOSENDNOTICERSP;

struct tagQueryNoticeReq;
typedef struct tagQueryNoticeReq     QUERYNOTICEREQ;
typedef struct tagQueryNoticeReq     *LPQUERYNOTICEREQ;

struct tagQueryNoticeRsp;
typedef struct tagQueryNoticeRsp     QUERYNOTICERSP;
typedef struct tagQueryNoticeRsp     *LPQUERYNOTICERSP;

struct tagDoDelNoticeReq;
typedef struct tagDoDelNoticeReq     DODELNOTICEREQ;
typedef struct tagDoDelNoticeReq     *LPDODELNOTICEREQ;

struct tagDoDelNoticeRsp;
typedef struct tagDoDelNoticeRsp     DODELNOTICERSP;
typedef struct tagDoDelNoticeRsp     *LPDODELNOTICERSP;

struct tagDoSendRollingMsgReq;
typedef struct tagDoSendRollingMsgReq     DOSENDROLLINGMSGREQ;
typedef struct tagDoSendRollingMsgReq     *LPDOSENDROLLINGMSGREQ;

struct tagDoSendRollingMsgRsp;
typedef struct tagDoSendRollingMsgRsp     DOSENDROLLINGMSGRSP;
typedef struct tagDoSendRollingMsgRsp     *LPDOSENDROLLINGMSGRSP;

struct tagQueryRollingReq;
typedef struct tagQueryRollingReq     QUERYROLLINGREQ;
typedef struct tagQueryRollingReq     *LPQUERYROLLINGREQ;

struct tagQueryRollingRsp;
typedef struct tagQueryRollingRsp     QUERYROLLINGRSP;
typedef struct tagQueryRollingRsp     *LPQUERYROLLINGRSP;

struct tagDoDelRollingReq;
typedef struct tagDoDelRollingReq     DODELROLLINGREQ;
typedef struct tagDoDelRollingReq     *LPDODELROLLINGREQ;

struct tagDoDelRollingRsp;
typedef struct tagDoDelRollingRsp     DODELROLLINGRSP;
typedef struct tagDoDelRollingRsp     *LPDODELROLLINGRSP;

struct tagDoSendMailReq;
typedef struct tagDoSendMailReq     DOSENDMAILREQ;
typedef struct tagDoSendMailReq     *LPDOSENDMAILREQ;

struct tagDoSendMailRsp;
typedef struct tagDoSendMailRsp     DOSENDMAILRSP;
typedef struct tagDoSendMailRsp     *LPDOSENDMAILRSP;

struct tagAqQueryOpenidInfoReq;
typedef struct tagAqQueryOpenidInfoReq     AQQUERYOPENIDINFOREQ;
typedef struct tagAqQueryOpenidInfoReq     *LPAQQUERYOPENIDINFOREQ;

struct tagAqQueryOpenidInfoRsp;
typedef struct tagAqQueryOpenidInfoRsp     AQQUERYOPENIDINFORSP;
typedef struct tagAqQueryOpenidInfoRsp     *LPAQQUERYOPENIDINFORSP;

struct tagAqQueryRoleInfoReq;
typedef struct tagAqQueryRoleInfoReq     AQQUERYROLEINFOREQ;
typedef struct tagAqQueryRoleInfoReq     *LPAQQUERYROLEINFOREQ;

struct tagAqQueryRoleInfoRsp;
typedef struct tagAqQueryRoleInfoRsp     AQQUERYROLEINFORSP;
typedef struct tagAqQueryRoleInfoRsp     *LPAQQUERYROLEINFORSP;

struct tagAqDoSendMessageReq;
typedef struct tagAqDoSendMessageReq     AQDOSENDMESSAGEREQ;
typedef struct tagAqDoSendMessageReq     *LPAQDOSENDMESSAGEREQ;

struct tagAqDoSendMessageRsp;
typedef struct tagAqDoSendMessageRsp     AQDOSENDMESSAGERSP;
typedef struct tagAqDoSendMessageRsp     *LPAQDOSENDMESSAGERSP;

struct tagAqDoUpdateCoinReq;
typedef struct tagAqDoUpdateCoinReq     AQDOUPDATECOINREQ;
typedef struct tagAqDoUpdateCoinReq     *LPAQDOUPDATECOINREQ;

struct tagAqDoUpdateCoinRsp;
typedef struct tagAqDoUpdateCoinRsp     AQDOUPDATECOINRSP;
typedef struct tagAqDoUpdateCoinRsp     *LPAQDOUPDATECOINRSP;

struct tagAqDoUpdateIngotReq;
typedef struct tagAqDoUpdateIngotReq     AQDOUPDATEINGOTREQ;
typedef struct tagAqDoUpdateIngotReq     *LPAQDOUPDATEINGOTREQ;

struct tagAqDoUpdateIngotRsp;
typedef struct tagAqDoUpdateIngotRsp     AQDOUPDATEINGOTRSP;
typedef struct tagAqDoUpdateIngotRsp     *LPAQDOUPDATEINGOTRSP;

struct tagAqDoClearScoreReq;
typedef struct tagAqDoClearScoreReq     AQDOCLEARSCOREREQ;
typedef struct tagAqDoClearScoreReq     *LPAQDOCLEARSCOREREQ;

struct tagAqDoClearScoreRsp;
typedef struct tagAqDoClearScoreRsp     AQDOCLEARSCORERSP;
typedef struct tagAqDoClearScoreRsp     *LPAQDOCLEARSCORERSP;

struct tagAqDoSetScoreReq;
typedef struct tagAqDoSetScoreReq     AQDOSETSCOREREQ;
typedef struct tagAqDoSetScoreReq     *LPAQDOSETSCOREREQ;

struct tagAqDoSetScoreRsp;
typedef struct tagAqDoSetScoreRsp     AQDOSETSCORERSP;
typedef struct tagAqDoSetScoreRsp     *LPAQDOSETSCORERSP;

struct tagAqQueryBossWarInfoReq;
typedef struct tagAqQueryBossWarInfoReq     AQQUERYBOSSWARINFOREQ;
typedef struct tagAqQueryBossWarInfoReq     *LPAQQUERYBOSSWARINFOREQ;

struct tagAqQueryBossWarInfoRsp;
typedef struct tagAqQueryBossWarInfoRsp     AQQUERYBOSSWARINFORSP;
typedef struct tagAqQueryBossWarInfoRsp     *LPAQQUERYBOSSWARINFORSP;

struct tagAqDoBanRankingReq;
typedef struct tagAqDoBanRankingReq     AQDOBANRANKINGREQ;
typedef struct tagAqDoBanRankingReq     *LPAQDOBANRANKINGREQ;

struct tagAqDoBanRankingRsp;
typedef struct tagAqDoBanRankingRsp     AQDOBANRANKINGRSP;
typedef struct tagAqDoBanRankingRsp     *LPAQDOBANRANKINGRSP;

struct tagAqDoBanRankingOfflineReq;
typedef struct tagAqDoBanRankingOfflineReq     AQDOBANRANKINGOFFLINEREQ;
typedef struct tagAqDoBanRankingOfflineReq     *LPAQDOBANRANKINGOFFLINEREQ;

struct tagAqDoBanRankingOfflineRsp;
typedef struct tagAqDoBanRankingOfflineRsp     AQDOBANRANKINGOFFLINERSP;
typedef struct tagAqDoBanRankingOfflineRsp     *LPAQDOBANRANKINGOFFLINERSP;

struct tagAqQueryUserSignatureNoticeReq;
typedef struct tagAqQueryUserSignatureNoticeReq     AQQUERYUSERSIGNATURENOTICEREQ;
typedef struct tagAqQueryUserSignatureNoticeReq     *LPAQQUERYUSERSIGNATURENOTICEREQ;

struct tagAqQueryUserSignatureNoticeRsp;
typedef struct tagAqQueryUserSignatureNoticeRsp     AQQUERYUSERSIGNATURENOTICERSP;
typedef struct tagAqQueryUserSignatureNoticeRsp     *LPAQQUERYUSERSIGNATURENOTICERSP;

struct tagAqDoSetSignatureNoticeReq;
typedef struct tagAqDoSetSignatureNoticeReq     AQDOSETSIGNATURENOTICEREQ;
typedef struct tagAqDoSetSignatureNoticeReq     *LPAQDOSETSIGNATURENOTICEREQ;

struct tagAqDoSetSignatureNoticeRsp;
typedef struct tagAqDoSetSignatureNoticeRsp     AQDOSETSIGNATURENOTICERSP;
typedef struct tagAqDoSetSignatureNoticeRsp     *LPAQDOSETSIGNATURENOTICERSP;

struct tagAqDoInitialUserReq;
typedef struct tagAqDoInitialUserReq     AQDOINITIALUSERREQ;
typedef struct tagAqDoInitialUserReq     *LPAQDOINITIALUSERREQ;

struct tagAqDoInitialUserRsp;
typedef struct tagAqDoInitialUserRsp     AQDOINITIALUSERRSP;
typedef struct tagAqDoInitialUserRsp     *LPAQDOINITIALUSERRSP;

struct tagAqDoZeroProfitReq;
typedef struct tagAqDoZeroProfitReq     AQDOZEROPROFITREQ;
typedef struct tagAqDoZeroProfitReq     *LPAQDOZEROPROFITREQ;

struct tagAqDoZeroProfitRsp;
typedef struct tagAqDoZeroProfitRsp     AQDOZEROPROFITRSP;
typedef struct tagAqDoZeroProfitRsp     *LPAQDOZEROPROFITRSP;

struct tagAqDoBanPlayReq;
typedef struct tagAqDoBanPlayReq     AQDOBANPLAYREQ;
typedef struct tagAqDoBanPlayReq     *LPAQDOBANPLAYREQ;

struct tagAqDoBanPlayRsp;
typedef struct tagAqDoBanPlayRsp     AQDOBANPLAYRSP;
typedef struct tagAqDoBanPlayRsp     *LPAQDOBANPLAYRSP;

struct tagAqDoBanAllPlayReq;
typedef struct tagAqDoBanAllPlayReq     AQDOBANALLPLAYREQ;
typedef struct tagAqDoBanAllPlayReq     *LPAQDOBANALLPLAYREQ;

struct tagAqDoBanAllPlayRsp;
typedef struct tagAqDoBanAllPlayRsp     AQDOBANALLPLAYRSP;
typedef struct tagAqDoBanAllPlayRsp     *LPAQDOBANALLPLAYRSP;

struct tagAqDoBanUserReq;
typedef struct tagAqDoBanUserReq     AQDOBANUSERREQ;
typedef struct tagAqDoBanUserReq     *LPAQDOBANUSERREQ;

struct tagAqDoBanUserRsp;
typedef struct tagAqDoBanUserRsp     AQDOBANUSERRSP;
typedef struct tagAqDoBanUserRsp     *LPAQDOBANUSERRSP;

struct tagAqDoBanCharacReq;
typedef struct tagAqDoBanCharacReq     AQDOBANCHARACREQ;
typedef struct tagAqDoBanCharacReq     *LPAQDOBANCHARACREQ;

struct tagAqDoBanCharacRsp;
typedef struct tagAqDoBanCharacRsp     AQDOBANCHARACRSP;
typedef struct tagAqDoBanCharacRsp     *LPAQDOBANCHARACRSP;

struct tagAqDoBanChatReq;
typedef struct tagAqDoBanChatReq     AQDOBANCHATREQ;
typedef struct tagAqDoBanChatReq     *LPAQDOBANCHATREQ;

struct tagAqDoBanChatRsp;
typedef struct tagAqDoBanChatRsp     AQDOBANCHATRSP;
typedef struct tagAqDoBanChatRsp     *LPAQDOBANCHATRSP;

struct tagAqDoClearChatReq;
typedef struct tagAqDoClearChatReq     AQDOCLEARCHATREQ;
typedef struct tagAqDoClearChatReq     *LPAQDOCLEARCHATREQ;

struct tagAqDoClearChatRsp;
typedef struct tagAqDoClearChatRsp     AQDOCLEARCHATRSP;
typedef struct tagAqDoClearChatRsp     *LPAQDOCLEARCHATRSP;

struct tagAqDoSendNoticeReq;
typedef struct tagAqDoSendNoticeReq     AQDOSENDNOTICEREQ;
typedef struct tagAqDoSendNoticeReq     *LPAQDOSENDNOTICEREQ;

struct tagAqDoSendNoticeRsp;
typedef struct tagAqDoSendNoticeRsp     AQDOSENDNOTICERSP;
typedef struct tagAqDoSendNoticeRsp     *LPAQDOSENDNOTICERSP;

struct tagAqDoUnpunishReq;
typedef struct tagAqDoUnpunishReq     AQDOUNPUNISHREQ;
typedef struct tagAqDoUnpunishReq     *LPAQDOUNPUNISHREQ;

struct tagAqDoUnpunishRsp;
typedef struct tagAqDoUnpunishRsp     AQDOUNPUNISHRSP;
typedef struct tagAqDoUnpunishRsp     *LPAQDOUNPUNISHRSP;

struct tagAqDoBanSpecifiedPlayReq;
typedef struct tagAqDoBanSpecifiedPlayReq     AQDOBANSPECIFIEDPLAYREQ;
typedef struct tagAqDoBanSpecifiedPlayReq     *LPAQDOBANSPECIFIEDPLAYREQ;

struct tagAqDoBanSpecifiedPlayRsp;
typedef struct tagAqDoBanSpecifiedPlayRsp     AQDOBANSPECIFIEDPLAYRSP;
typedef struct tagAqDoBanSpecifiedPlayRsp     *LPAQDOBANSPECIFIEDPLAYRSP;

struct tagAqDoBanSpecifiedIncomeReq;
typedef struct tagAqDoBanSpecifiedIncomeReq     AQDOBANSPECIFIEDINCOMEREQ;
typedef struct tagAqDoBanSpecifiedIncomeReq     *LPAQDOBANSPECIFIEDINCOMEREQ;

struct tagAqDoBanSpecifiedIncomeRsp;
typedef struct tagAqDoBanSpecifiedIncomeRsp     AQDOBANSPECIFIEDINCOMERSP;
typedef struct tagAqDoBanSpecifiedIncomeRsp     *LPAQDOBANSPECIFIEDINCOMERSP;

struct tagDoGlobalFunctionSwitchReq;
typedef struct tagDoGlobalFunctionSwitchReq     DOGLOBALFUNCTIONSWITCHREQ;
typedef struct tagDoGlobalFunctionSwitchReq     *LPDOGLOBALFUNCTIONSWITCHREQ;

struct tagDoGlobalFunctionSwitchRsp;
typedef struct tagDoGlobalFunctionSwitchRsp     DOGLOBALFUNCTIONSWITCHRSP;
typedef struct tagDoGlobalFunctionSwitchRsp     *LPDOGLOBALFUNCTIONSWITCHRSP;

struct tagDoGlobalIncomeSwitchReq;
typedef struct tagDoGlobalIncomeSwitchReq     DOGLOBALINCOMESWITCHREQ;
typedef struct tagDoGlobalIncomeSwitchReq     *LPDOGLOBALINCOMESWITCHREQ;

struct tagDoGlobalIncomeSwitchRsp;
typedef struct tagDoGlobalIncomeSwitchRsp     DOGLOBALINCOMESWITCHRSP;
typedef struct tagDoGlobalIncomeSwitchRsp     *LPDOGLOBALINCOMESWITCHRSP;

struct tagDoDelItemReq;
typedef struct tagDoDelItemReq     DODELITEMREQ;
typedef struct tagDoDelItemReq     *LPDODELITEMREQ;

struct tagDoDelItemRsp;
typedef struct tagDoDelItemRsp     DODELITEMRSP;
typedef struct tagDoDelItemRsp     *LPDODELITEMRSP;

struct tagDoDelPetReq;
typedef struct tagDoDelPetReq     DODELPETREQ;
typedef struct tagDoDelPetReq     *LPDODELPETREQ;

struct tagDoDelPetRsp;
typedef struct tagDoDelPetRsp     DODELPETRSP;
typedef struct tagDoDelPetRsp     *LPDODELPETRSP;

struct tagAqDoBindIncomeReq;
typedef struct tagAqDoBindIncomeReq     AQDOBINDINCOMEREQ;
typedef struct tagAqDoBindIncomeReq     *LPAQDOBINDINCOMEREQ;

struct tagAqDoBindIncomeRsp;
typedef struct tagAqDoBindIncomeRsp     AQDOBINDINCOMERSP;
typedef struct tagAqDoBindIncomeRsp     *LPAQDOBINDINCOMERSP;

struct tagQueryActivityHasDoneReq;
typedef struct tagQueryActivityHasDoneReq     QUERYACTIVITYHASDONEREQ;
typedef struct tagQueryActivityHasDoneReq     *LPQUERYACTIVITYHASDONEREQ;

struct tagQueryActivityHasDoneRsp;
typedef struct tagQueryActivityHasDoneRsp     QUERYACTIVITYHASDONERSP;
typedef struct tagQueryActivityHasDoneRsp     *LPQUERYACTIVITYHASDONERSP;

struct tagQueryGuildInfoReq;
typedef struct tagQueryGuildInfoReq     QUERYGUILDINFOREQ;
typedef struct tagQueryGuildInfoReq     *LPQUERYGUILDINFOREQ;

struct tagQueryGuildInfoRsp;
typedef struct tagQueryGuildInfoRsp     QUERYGUILDINFORSP;
typedef struct tagQueryGuildInfoRsp     *LPQUERYGUILDINFORSP;

struct tagQueryGuildFuzzyReq;
typedef struct tagQueryGuildFuzzyReq     QUERYGUILDFUZZYREQ;
typedef struct tagQueryGuildFuzzyReq     *LPQUERYGUILDFUZZYREQ;

struct tagQueryGuildFuzzyRsp;
typedef struct tagQueryGuildFuzzyRsp     QUERYGUILDFUZZYRSP;
typedef struct tagQueryGuildFuzzyRsp     *LPQUERYGUILDFUZZYRSP;

struct tagQueryIdToGuildInfoReq;
typedef struct tagQueryIdToGuildInfoReq     QUERYIDTOGUILDINFOREQ;
typedef struct tagQueryIdToGuildInfoReq     *LPQUERYIDTOGUILDINFOREQ;

struct tagQueryIdToGuildInfoRsp;
typedef struct tagQueryIdToGuildInfoRsp     QUERYIDTOGUILDINFORSP;
typedef struct tagQueryIdToGuildInfoRsp     *LPQUERYIDTOGUILDINFORSP;

struct tagQueryIdToGuildPlayersReq;
typedef struct tagQueryIdToGuildPlayersReq     QUERYIDTOGUILDPLAYERSREQ;
typedef struct tagQueryIdToGuildPlayersReq     *LPQUERYIDTOGUILDPLAYERSREQ;

struct tagQueryIdToGuildPlayersRsp;
typedef struct tagQueryIdToGuildPlayersRsp     QUERYIDTOGUILDPLAYERSRSP;
typedef struct tagQueryIdToGuildPlayersRsp     *LPQUERYIDTOGUILDPLAYERSRSP;

struct tagDoSetNoPlayReq;
typedef struct tagDoSetNoPlayReq     DOSETNOPLAYREQ;
typedef struct tagDoSetNoPlayReq     *LPDOSETNOPLAYREQ;

struct tagDoSetNoPlayRsp;
typedef struct tagDoSetNoPlayRsp     DOSETNOPLAYRSP;
typedef struct tagDoSetNoPlayRsp     *LPDOSETNOPLAYRSP;

struct tagQueryRoleidToOpenidReq;
typedef struct tagQueryRoleidToOpenidReq     QUERYROLEIDTOOPENIDREQ;
typedef struct tagQueryRoleidToOpenidReq     *LPQUERYROLEIDTOOPENIDREQ;

struct tagQueryRoleidToOpenidRsp;
typedef struct tagQueryRoleidToOpenidRsp     QUERYROLEIDTOOPENIDRSP;
typedef struct tagQueryRoleidToOpenidRsp     *LPQUERYROLEIDTOOPENIDRSP;

struct tagDoSwitchSceneReq;
typedef struct tagDoSwitchSceneReq     DOSWITCHSCENEREQ;
typedef struct tagDoSwitchSceneReq     *LPDOSWITCHSCENEREQ;

struct tagDoSwitchSceneRsp;
typedef struct tagDoSwitchSceneRsp     DOSWITCHSCENERSP;
typedef struct tagDoSwitchSceneRsp     *LPDOSWITCHSCENERSP;

struct tagQueryBagStoreReq;
typedef struct tagQueryBagStoreReq     QUERYBAGSTOREREQ;
typedef struct tagQueryBagStoreReq     *LPQUERYBAGSTOREREQ;

struct tagQueryBagStoreRsp;
typedef struct tagQueryBagStoreRsp     QUERYBAGSTORERSP;
typedef struct tagQueryBagStoreRsp     *LPQUERYBAGSTORERSP;

#pragma pack(1)


/* IDIP消息头 */
struct tagIdipHeader
{
    uint32_t  dwPacketLen;                          /* 包长 */
    uint32_t  dwCmdid;                              /* 命令ID */
    uint32_t  dwSeqid;                              /* 流水号 */
    char      szServiceName[SERVICE_NAME_LENGTH];   /* 服务名 */
    uint32_t  dwSendTime;                           /* 发送时间YYYYMMDD对应的整数 */
    uint32_t  dwVersion;                            /* 版本号 */
    char      szAuthenticate[AUTHENTICATE_LENGTH];  /* 加密串 */
    int32_t   iResult;                              /* 错误码,返回码类型：0：处理成功，需要解开包体获得详细信息,1：处理成功，但包体返回为空，不需要处理包体（eg：查询用户角色，用户角色不存在等），-1: 网络通信异常,-2：超时,-3：数据库操作异常,-4：API返回异常,-5：服务器忙,-6：其他错误,小于-100 ：用户自定义错误，需要填写szRetErrMsg */
    char      szRetErrMsg[ERROR_MSG_LENGTH];        /* 错误信息 */
};

/* IDIP数据包 */
struct tagIdipDataPaket
{
    IDIPHEADER    stIdipHead;                    /* 包头信息 */
    char          szIdipBody[IDIP_BODY_LENGTH];  /* 包体信息 */
};

/* 个人信息对象 */
struct tagSUsrInfo
{
    char      szRoleId[MAX_ROLEID_LEN];        /* 角色ID */
    char      szRoleName[MAX_ROLENAME_LEN];    /* 角色名称 */
    uint8_t   bGender;                         /* 性别（1：男；2：女） */
    char      szJob[MAX_JOB_LEN];              /* 职业 */
    uint32_t  dwExp;                           /* 经验值 */
    uint32_t  dwLevel;                         /* 当前等级 */
    uint64_t  ullScene;                        /* 所在场景 */
    char      szLocation[MAX_LOCATION_LEN];    /* 所在位置 */
    uint32_t  dwFight;                         /* 战斗力 */
    uint32_t  dwGold;                          /* 元宝存量 */
    uint32_t  dwMoney;                         /* 金币存量 */
    uint32_t  dwBindGold;                      /* 绑定元宝存量 */
    uint32_t  dwRegisterTime;                  /* 注册时间 */
    uint32_t  dwLastLogoutTime;                /* 最后登出时间 */
    uint8_t   bIsOnline;                       /* 当前是否在线（1是 0 否） */
    uint32_t  dwTime;                          /* 入帮时间 */
    int32_t   iPosition;                       /* 帮内职务 */
    char      szGuildName[MAX_GUILDNAME_LEN];  /* 帮会名称 */
    int32_t   iGraduation;                     /* 拜师完成 */
    int32_t   iIsFriend;                       /* 结拜达成 */
};

/* 公告信息对象 */
struct tagSNoticeInfo
{
    uint32_t  dwPartition;                             /* 小区ID */
    uint64_t  ullNoticeId;                             /* 公告ID */
    uint32_t  dwBeginTime;                             /* 公告开始时间 */
    uint32_t  dwEndTime;                               /* 公告结束时间 */
    uint8_t   bType;                                   /* 类型1,2,3,4,5 */
    char      szTypeText[MAX_TYPETEXT_LEN];            /* 类型标题 */
    char      szNoticeTitle[MAX_NOTICETITLE_LEN];      /* 公告标题 */
    char      szNoticeContent[MAX_NOTICECONTENT_LEN];  /* 公告内容 */
};

/* 跑马灯信息对象 */
struct tagSRollingMsgInfo
{
    uint32_t  dwPartition;                               /* 小区ID */
    uint64_t  ullNoticeId;                               /* 公告ID */
    uint32_t  dwBeginTime;                               /* 公告开始时间 */
    uint32_t  dwEndTime;                                 /* 公告结束时间 */
    char      szRollingContent[MAX_ROLLINGCONTENT_LEN];  /* 走马灯内容 */
};

/* 角色信息对象 */
struct tagSRoleInfo
{
    char      szRoleId[MAX_ROLEID_LEN];      /* 角色ID */
    char      szRoleName[MAX_ROLENAME_LEN];  /* 昵称 */
    uint8_t   bStatus;                       /* 封停状态 */
};

/* 公会信息对象 */
struct tagSGuildInfo
{
    uint64_t  ullGuildId;                      /* 公会id */
    char      szGuildName[MAX_GUILDNAME_LEN];  /* 公会全名 */
    uint32_t  dwCurMemberCnt;                  /* 当前人数 */
    uint32_t  dwEnableCnt;                     /* 公会最大容纳人数 */
};

/* 公会成员信息 */
struct tagSGuildMemberInfo
{
    char      szRoleId[MAX_ROLEID_LEN];      /* 角色ID */
    char      szRoleName[MAX_ROLENAME_LEN];  /* 角色名 */
    char      szOpenId[MAX_OPENID_LEN];      /* openid */
    uint32_t  dwLevel;                       /* 游戏等级 */
    uint32_t  dwPos;                         /* 职务 */
};

/* 查询个人信息请求 */
struct tagQueryUsrInfoReq
{
    uint32_t  dwAreaId;                      /* 服务器：微信（1），手Q（2） */
    uint32_t  dwPartition;                   /* 小区ID：***，需要指定小区，不能查全部 */
    uint8_t   bPlatId;                       /* 平台：IOS（0），安卓（1）,全部（2） */
    char      szOpenId[MAX_OPENID_LEN];      /* openid */
    char      szRoleId[MAX_ROLEID_LEN];      /* 角色ID */
    char      szRoleName[MAX_ROLENAME_LEN];  /* 角色名字 */
};

/* 查询个人信息应答 */
struct tagQueryUsrInfoRsp
{
    uint32_t    dwUsrList_count;             /* 个人信息列表的最大数量 */
    SUSRINFO    stUsrList[MAX_USRLIST_NUM];  /* 个人信息列表 */
};

/* 发布公告请求 */
struct tagDoSendNoticeReq
{
    uint32_t  dwAreaId;                                /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;                             /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                                 /* 平台： IOS(0)，安卓(1) */
    uint32_t  dwBeginTime;                             /* 公告开始时间 */
    uint32_t  dwEndTime;                               /* 公告结束时间 */
    uint8_t   bType;                                   /* 类型1,2,3,4,5 */
    char      szTypeText[MAX_TYPETEXT_LEN];            /* 类型标题 */
    char      szNoticeTitle[MAX_NOTICETITLE_LEN];      /* 公告标题 */
    char      szNoticeContent[MAX_NOTICECONTENT_LEN];  /* 公告内容 */
    uint32_t  dwSource;                                /* 渠道号，由前端生成，不需要填写 */
    char      szSerial[MAX_SERIAL_LEN];                /* 流水号，由前端生成，不需填写 */
};

/* 发布公告应答 */
struct tagDoSendNoticeRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 查询公告请求 */
struct tagQueryNoticeReq
{
    uint32_t  dwAreaId;     /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;  /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;      /* 平台： IOS(0)，安卓(1) */
    uint32_t  dwBeginTime;  /* 开始时间 */
    uint32_t  dwEndTime;    /* 结束时间 */
    uint8_t   bPageNo;      /* 分页（从0开始） */
};

/* 查询公告应答 */
struct tagQueryNoticeRsp
{
    uint32_t       dwNoticeList_count;                /* 公告列表的最大数量 */
    SNOTICEINFO    stNoticeList[MAX_NOTICELIST_NUM];  /* 公告列表 */
    uint32_t       dwTotalPageNo;                     /* 总页码 */
};

/* 删除公告请求 */
struct tagDoDelNoticeReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;               /* 区服 */
    uint8_t   bPlatId;                   /* 平台： IOS(0)，安卓(1) */
    uint64_t  ullNoticeId;               /* 公告ID： 大于0 */
    uint32_t  dwSource;                  /* 渠道号，由前端生成，不需要填写 */
    char      szSerial[MAX_SERIAL_LEN];  /* 流水号，由前端生成，不需填写 */
};

/* 删除公告应答 */
struct tagDoDelNoticeRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 发走马灯请求 */
struct tagDoSendRollingMsgReq
{
    uint32_t  dwAreaId;                                  /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;                               /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                                   /* 平台： IOS(0)，安卓(1) */
    uint64_t  ullNoticeId;                               /* 走马灯ID： 大于0 */
    uint32_t  dwBeginTime;                               /* 走马灯开始时间 */
    uint32_t  dwEndTime;                                 /* 走马灯结束时间 */
    char      szRollingContent[MAX_ROLLINGCONTENT_LEN];  /* 走马灯内容 */
    uint32_t  dwSource;                                  /* 渠道号，由前端生成，不需要填写 */
    char      szSerial[MAX_SERIAL_LEN];                  /* 流水号，由前端生成，不需填写 */
    uint32_t  dwFrequency;                               /* 显示频率（min） */
};

/* 发走马灯应答 */
struct tagDoSendRollingMsgRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 查询走马灯请求 */
struct tagQueryRollingReq
{
    uint32_t  dwAreaId;     /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;  /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;      /* 平台： IOS(0)，安卓(1) */
    uint32_t  dwBeginTime;  /* 开始时间 */
    uint32_t  dwEndTime;    /* 结束时间 */
};

/* 查询走马灯应答 */
struct tagQueryRollingRsp
{
    uint32_t           dwRollingMsgList_count;                    /* 走马灯列表的最大数量 */
    SROLLINGMSGINFO    stRollingMsgList[MAX_ROLLINGMSGLIST_NUM];  /* 走马灯列表 */
};

/* 删除走马灯请求 */
struct tagDoDelRollingReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;               /* 区服 */
    uint8_t   bPlatId;                   /* 平台： IOS(0)，安卓(1) */
    uint64_t  ullNoticeId;               /* 公告ID： 大于0 */
    uint32_t  dwSource;                  /* 渠道号，由前端生成，不需要填写 */
    char      szSerial[MAX_SERIAL_LEN];  /* 流水号，由前端生成，不需填写 */
};

/* 删除走马灯应答 */
struct tagDoDelRollingRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 发送邮件（送道具）请求 */
struct tagDoSendMailReq
{
    uint32_t  dwAreaId;                            /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;                         /* 小区ID：*** */
    uint8_t   bPlatId;                             /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];            /* openid */
    char      szRoleId[MAX_ROLEID_LEN];            /* 角色id */
    char      szMailTitle[MAX_MAILTITLE_LEN];      /* 邮件标题 */
    char      szMailContent[MAX_MAILCONTENT_LEN];  /* 邮件内容 */
    uint32_t  dwItemId;                            /* 道具id */
    uint32_t  dwItemNum;                           /* 道具数量 */
    uint8_t   bIsBind;                             /* 是否绑定（0不绑定 1绑定） */
    int8_t    chPriority;                          /* 优先级 */
    uint32_t  dwSource;                            /* 渠道号，由前端生成，不需要填写 */
    char      szSerial[MAX_SERIAL_LEN];            /* 流水号，由前端生成，不需填写 */
};

/* 发送邮件（送道具）应答 */
struct tagDoSendMailRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 查询openid基本信息（AQ）请求 */
struct tagAqQueryOpenidInfoReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信（1），手Q（2） */
    uint32_t  dwPartition;               /* 小区ID：***，需要指定小区，不能查全部 */
    uint8_t   bPlatId;                   /* 平台：IOS（0），安卓（1）,全部（2） */
    char      szOpenId[MAX_OPENID_LEN];  /* openid */
    char      szRoleId[MAX_ROLEID_LEN];  /* 角色ID */
};

/* 查询openid基本信息（AQ）应答 */
struct tagAqQueryOpenidInfoRsp
{
    char      szRoleName[MAX_ROLENAME_LEN];  /* 角色名 */
    int32_t   iLevel;                        /* 等级 */
    int32_t   iGold;                         /* 金币数量 */
    int32_t   iMoney;                        /* 交子数量 */
    int32_t   iIngot;                        /* 元宝数量 */
    int32_t   iBindIngot;                    /* 绑定元宝数量 */
    int32_t   iGuildContribution;            /* 帮贡 */
};

/* 查询帐号下角色信息（AQ）请求 */
struct tagAqQueryRoleInfoReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信（1），手Q（2） */
    uint32_t  dwPartition;               /* 小区ID：***，需要指定小区，不能查全部 */
    uint8_t   bPlatId;                   /* 平台：IOS（0），安卓（1）,全部（2） */
    char      szOpenId[MAX_OPENID_LEN];  /* openid */
};

/* 查询帐号下角色信息（AQ）应答 */
struct tagAqQueryRoleInfoRsp
{
    uint32_t     dwRoleList_count;              /* 角色信息列表的最大数量 */
    SROLEINFO    stRoleList[MAX_ROLELIST_NUM];  /* 角色信息列表 */
};

/* 发消息（AQ）请求 */
struct tagAqDoSendMessageReq
{
    uint32_t  dwAreaId;                    /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;                 /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                     /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];    /* openid */
    char      szRoleId[MAX_ROLEID_LEN];    /* 角色id */
    char      szMessage[MAX_MESSAGE_LEN];  /* 消息内容 */
};

/* 发消息（AQ）应答 */
struct tagAqDoSendMessageRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 修改游戏币数量（AQ）请求 */
struct tagAqDoUpdateCoinReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;               /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                   /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];  /* openid */
    char      szRoleId[MAX_ROLEID_LEN];  /* 角色id */
    int32_t   iType;                     /* 类型：1铜钱，2银两，3绑元，99全部 */
    int64_t   llNum;                     /* 变动值（正数加，负数减） */
    uint32_t  dwSource;                  /* 渠道号，由前端生成，不需要填写 */
    char      szSerial[MAX_SERIAL_LEN];  /* 流水号，由前端生成，不需要填写 */
};

/* 修改游戏币数量（AQ）应答 */
struct tagAqDoUpdateCoinRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 修改元宝数量（AQ）请求 */
struct tagAqDoUpdateIngotReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;               /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                   /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];  /* openid */
    char      szRoleId[MAX_ROLEID_LEN];  /* 角色id */
    int64_t   llNum;                     /* 变动值（正数加元宝，负数减元宝）  */
    int8_t    chIsKick;                  /* 是否踢玩家下线 */
    uint32_t  dwSource;                  /* 渠道号，由前端生成，不需要填写 */
    char      szSerial[MAX_SERIAL_LEN];  /* 流水号，由前端生成，不需要填写 */
};

/* 修改元宝数量（AQ）应答 */
struct tagAqDoUpdateIngotRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 清零游戏分数（AQ）请求 */
struct tagAqDoClearScoreReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;               /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                   /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];  /* openid */
    char      szRoleId[MAX_ROLEID_LEN];  /* 角色id */
    int32_t   iType;                     /* 分数类型（1  帮贡，99为全选）   */
    uint8_t   bIsClear;                  /* 是否清零（0 不清零，1 清零） */
    uint32_t  dwSource;                  /* 渠道号，由前端生成，不需要填写 */
    char      szSerial[MAX_SERIAL_LEN];  /* 流水号，由前端生成，不需要填写 */
};

/* 清零游戏分数（AQ）应答 */
struct tagAqDoClearScoreRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 设置游戏分数（AQ）请求 */
struct tagAqDoSetScoreReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;               /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                   /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];  /* openid */
    char      szRoleId[MAX_ROLEID_LEN];  /* 角色id */
    int32_t   iType;                     /* 分数类型（1 帮贡，99为全选） */
    int64_t   llNum;                     /* 设定值 */
    uint32_t  dwSource;                  /* 渠道号，由前端生成，不需要填写 */
    char      szSerial[MAX_SERIAL_LEN];  /* 流水号，由前端生成，不需要填写 */
};

/* 设置游戏分数（AQ）应答 */
struct tagAqDoSetScoreRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 查询Boss战当前信息（AQ）请求 */
struct tagAqQueryBossWarInfoReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信（1），手Q（2） */
    uint32_t  dwPartition;               /* 小区ID：***，需要指定小区，不能查全部 */
    uint8_t   bPlatId;                   /* 平台：IOS（0），安卓（1）,全部（2） */
    char      szOpenId[MAX_OPENID_LEN];  /* openid */
    char      szRoleId[MAX_ROLEID_LEN];  /* 角色ID */
    char      szReason[MAX_REASON_LEN];  /* 操作原因 */
};

/* 查询Boss战当前信息（AQ）应答 */
struct tagAqQueryBossWarInfoRsp
{
    char      szRoleName[MAX_ROLENAME_LEN];  /* 角色名 */
    int32_t   iLevel;                        /* 等级 */
    int64_t   llTotalDamage;                 /* 当前Boss战角色总伤害 */
    int64_t   llBossWarRank;                 /* 当前Boss战角色排名 */
};

/* 禁止参与排行榜接口（实时榜）（AQ）请求 */
struct tagAqDoBanRankingReq
{
    uint32_t  dwAreaId;                    /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;                 /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                     /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];    /* openid */
    char      szRoleId[MAX_ROLEID_LEN];    /* 角色id */
    uint8_t   bIsClear;                    /* 是否清零榜单数据（0 否，1 是） */
    int32_t   iType;                       /* 榜单类型 */
    int64_t   llBanTime;                   /* 禁止参与排行榜时长（秒） */
    char      szBanText[MAX_BANTEXT_LEN];  /* 禁止排行榜提示内容（文本） */
    uint32_t  dwSource;                    /* 渠道号，由前端生成，不需要填写 */
    char      szSerial[MAX_SERIAL_LEN];    /* 流水号，由前端生成，不需要填写 */
};

/* 禁止参与排行榜接口（实时榜）（AQ）应答 */
struct tagAqDoBanRankingRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 禁止参与排行榜接口（离线榜）（AQ）请求 */
struct tagAqDoBanRankingOfflineReq
{
    uint32_t  dwAreaId;                    /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;                 /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                     /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];    /* openid */
    char      szRoleId[MAX_ROLEID_LEN];    /* 角色id */
    uint8_t   bIsClear;                    /* 是否清零榜单数据（0 否，1 是） */
    int32_t   iType;                       /* 榜单类型 */
    int64_t   llBanTime;                   /* 禁止参与排行榜时长（秒） */
    char      szBanText[MAX_BANTEXT_LEN];  /* 禁止排行榜提示内容（文本） */
    uint32_t  dwSource;                    /* 渠道号，由前端生成，不需要填写 */
    char      szSerial[MAX_SERIAL_LEN];    /* 流水号，由前端生成，不需要填写 */
};

/* 禁止参与排行榜接口（离线榜）（AQ）应答 */
struct tagAqDoBanRankingOfflineRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 查询用户签名和公会公告（AQ）请求 */
struct tagAqQueryUserSignatureNoticeReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信（1），手Q（2） */
    uint32_t  dwPartition;               /* 小区ID：***，需要指定小区，不能查全部 */
    uint8_t   bPlatId;                   /* 平台：IOS（0），安卓（1）,全部（2） */
    char      szOpenId[MAX_OPENID_LEN];  /* openid */
    char      szRoleId[MAX_ROLEID_LEN];  /* 角色ID */
};

/* 查询用户签名和公会公告（AQ）应答 */
struct tagAqQueryUserSignatureNoticeRsp
{
    char      szRoleName[MAX_ROLENAME_LEN];          /* 角色名 */
    int32_t   iLevel;                                /* 等级 */
    char      szSignature[MAX_SIGNATURE_LEN];        /* 用户签名 */
    uint64_t  ullGuildId;                            /* 公会ID */
    uint64_t  ullGuildIdentity;                      /* 公会身份 */
    char      szGuildNotice[MAX_GUILDNOTICE_LEN];    /* 公会公告 */
    char      szGuildPurpose[MAX_GUILDPURPOSE_LEN];  /* 工会宗旨 */
    uint64_t  ullGuildSerial;                        /* 帮会流水号 */
};

/* 设置用户签名和公会公告（AQ）请求 */
struct tagAqDoSetSignatureNoticeReq
{
    uint32_t  dwAreaId;                          /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;                       /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                           /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];          /* openid */
    char      szRoleId[MAX_ROLEID_LEN];          /* 角色id */
    uint64_t  ullGuildId;                        /* 公会ID */
    int32_t   iType;                             /* 信息类型（1 用户签名，2 公会公告， 99为全选） */
    char      szSetContent[MAX_SETCONTENT_LEN];  /* 设定内容 */
};

/* 设置用户签名和公会公告（AQ）应答 */
struct tagAqDoSetSignatureNoticeRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 初始化帐号接口（AQ）请求 */
struct tagAqDoInitialUserReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;               /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                   /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];  /* openid */
    char      szRoleId[MAX_ROLEID_LEN];  /* 角色id */
};

/* 初始化帐号接口（AQ）应答 */
struct tagAqDoInitialUserRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 零收益（AQ）请求 */
struct tagAqDoZeroProfitReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;               /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                   /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];  /* openid */
    char      szRoleId[MAX_ROLEID_LEN];  /* 角色id */
    int32_t   iTime;                     /* 零收益时长（秒） */
    char      szReason[MAX_REASON_LEN];  /* 操作原因 */
};

/* 零收益（AQ）应答 */
struct tagAqDoZeroProfitRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 禁止指定玩法（AQ）请求 */
struct tagAqDoBanPlayReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;               /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                   /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];  /* openid */
    char      szRoleId[MAX_ROLEID_LEN];  /* 角色id */
    int32_t   iType;                     /* 禁止类型 */
    int32_t   iBanTime;                  /* 禁止玩法时长（秒） */
    char      szText[MAX_TEXT_LEN];      /* 提示内容（文本） */
};

/* 禁止指定玩法（AQ）应答 */
struct tagAqDoBanPlayRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 禁止所有玩法（AQ）请求 */
struct tagAqDoBanAllPlayReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;               /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                   /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];  /* openid */
    char      szRoleId[MAX_ROLEID_LEN];  /* 角色id */
    int32_t   iBanTime;                  /* 禁止所有玩法时长（秒） */
    char      szText[MAX_TEXT_LEN];      /* 提示内容（文本） */
};

/* 禁止所有玩法（AQ）应答 */
struct tagAqDoBanAllPlayRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 封号（AQ）请求 */
struct tagAqDoBanUserReq
{
    uint32_t  dwAreaId;                        /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;                     /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                         /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];        /* openid */
    char      szRoleId[MAX_ROLEID_LEN];        /* 角色id */
    int32_t   iBanTime;                        /* 封停时长（秒） */
    char      szBanReason[MAX_BANREASON_LEN];  /* 封号原因 */
};

/* 封号（AQ）应答 */
struct tagAqDoBanUserRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 封角色（AQ）请求 */
struct tagAqDoBanCharacReq
{
    uint32_t  dwAreaId;                        /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;                     /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                         /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];        /* openid */
    char      szRoleId[MAX_ROLEID_LEN];        /* 角色id */
    int32_t   iBanTime;                        /* 封停时长（秒） */
    char      szBanReason[MAX_BANREASON_LEN];  /* 封号原因 */
};

/* 封角色（AQ）应答 */
struct tagAqDoBanCharacRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 禁言（AQ）请求 */
struct tagAqDoBanChatReq
{
    uint32_t  dwAreaId;                        /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;                     /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                         /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];        /* openid */
    char      szRoleId[MAX_ROLEID_LEN];        /* 角色id */
    int32_t   iBanTime;                        /* 禁言时长（秒） */
    char      szBanReason[MAX_BANREASON_LEN];  /* 禁言原因 */
};

/* 禁言（AQ）应答 */
struct tagAqDoBanChatRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 发言清除（AQ）请求 */
struct tagAqDoClearChatReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;               /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                   /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];  /* openid */
    char      szRoleId[MAX_ROLEID_LEN];  /* 角色id */
};

/* 发言清除（AQ）应答 */
struct tagAqDoClearChatRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 发布公告（AQ）请求 */
struct tagAqDoSendNoticeReq
{
    uint32_t  dwAreaId;                                /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;                             /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                                 /* 平台： IOS(0)，安卓(1) */
    int32_t   iChannel;                                /* 频道（0 系统消息，1 世界消息，2 走马灯公告，99 全部） */
    char      szNoticeContent[MAX_NOTICECONTENT_LEN];  /* 公告内容 */
    uint32_t  dwSource;                                /* 渠道号，由前端生成，不需要填写 */
    char      szSerial[MAX_SERIAL_LEN];                /* 流水号，由前端生成，不需填写 */
};

/* 发布公告（AQ）应答 */
struct tagAqDoSendNoticeRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 解除处罚（AQ）请求 */
struct tagAqDoUnpunishReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;               /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                   /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];  /* openid */
    char      szRoleId[MAX_ROLEID_LEN];  /* 角色id */
    uint8_t   bUnZeroProfit;             /* 解除零收益状态（0 否，1 是） */
    uint8_t   bUnAllPlay;                /* 解除所有玩法限制（0 否，1 是） */
    uint8_t   bUnBanRanking;             /* 解除禁止参与排行榜限制（0 否，1 是） */
    uint8_t   bUnBanUser;                /* 解除封号（0 否，1 是） */
    uint8_t   bUnBanChat;                /* 解除禁言（0 否，1 是） */
    uint8_t   bUnBanCharac;              /* 解封角色（0 否，1 是） */
};

/* 解除处罚（AQ）应答 */
struct tagAqDoUnpunishRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 禁止指定玩法（针对功能）（AQ）请求 */
struct tagAqDoBanSpecifiedPlayReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;               /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                   /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];  /* openid */
    char      szRoleId[MAX_ROLEID_LEN];  /* 角色id */
    int32_t   iType;                     /* 禁止类型 */
    int32_t   iBanTime;                  /* 禁止玩法时长（秒） */
    char      szText[MAX_TEXT_LEN];      /* 提示内容（文本） */
};

/* 禁止指定玩法（针对功能）（AQ）应答 */
struct tagAqDoBanSpecifiedPlayRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 禁止指定收益（AQ）请求 */
struct tagAqDoBanSpecifiedIncomeReq
{
    uint32_t  dwAreaId;              /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;           /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;               /* 平台： IOS(0)，安卓(1) */
    int32_t   iType;                 /* 禁止类型（1老三环、2燕子坞、3四绝庄、4杀星、5缥缈峰、6少室山、7江湖历练、8每日任务、9帮会任务、10帮会炼金、11帮会传功、12帮会行酒令、13珍珑棋局、14夺宝马贼、15打图挖宝、16科举答题、17反贼入侵、18英雄试炼、19帮会守卫战、20天降灵兽、21蹴鞠大赛、22一千零一个愿望、23师门选贤、24校场、25宋辽大战、26大逃杀、27凤凰古城争夺战、28领地争夺战、29矿场争夺、30百里挑一、31世界boss
99 全选） */
    int32_t   iBanTime;              /* 禁止玩法时长（秒） */
    char      szText[MAX_TEXT_LEN];  /* 提示内容（文本） */
};

/* 禁止指定收益（AQ）应答 */
struct tagAqDoBanSpecifiedIncomeRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 全局功能开关请求 */
struct tagDoGlobalFunctionSwitchReq
{
    uint32_t  dwAreaId;     /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;  /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;      /* 平台： IOS(0)，安卓(1) */
    int32_t   iType;        /* 功能id */
    int8_t    chSwitch;     /* 操作：0关闭，1打开 */
};

/* 全局功能开关应答 */
struct tagDoGlobalFunctionSwitchRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 全局功能收益开关请求 */
struct tagDoGlobalIncomeSwitchReq
{
    uint32_t  dwAreaId;     /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;  /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;      /* 平台： IOS(0)，安卓(1) */
    int32_t   iType;        /* 功能id */
    int8_t    chSwitch;     /* 操作：0关闭，1打开 */
};

/* 全局功能收益开关应答 */
struct tagDoGlobalIncomeSwitchRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 删除道具请求 */
struct tagDoDelItemReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;               /* 小区ID：*** */
    uint8_t   bPlatId;                   /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];  /* openid */
    char      szRoleId[MAX_ROLEID_LEN];  /* 角色id */
    int32_t   iEraseType;                /* 删除类型 1：删除背包，2删除身上穿的装备，3删除仓库 */
    int32_t   iItemTableId;              /* 道具表的索引id */
    int64_t   llItemId;                  /* 道具id */
    uint32_t  dwItemNum;                 /* 道具数量 */
    uint8_t   bBindType;                 /* 绑定类型:（0优先非绑定，1只删除绑定，2只删除非绑定 ） */
    uint32_t  dwSource;                  /* 渠道号，由前端生成，不需要填写 */
    char      szSerial[MAX_SERIAL_LEN];  /* 流水号，由前端生成，不需填写 */
};

/* 删除道具应答 */
struct tagDoDelItemRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 删除珍兽请求 */
struct tagDoDelPetReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;               /* 小区ID：*** */
    uint8_t   bPlatId;                   /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];  /* openid */
    char      szRoleId[MAX_ROLEID_LEN];  /* 角色id */
    uint32_t  dwPetGuidH;                /* 珍兽guid高位 */
    uint32_t  dwPetGuidL;                /* 珍兽guid低位 */
    uint32_t  dwSource;                  /* 渠道号，由前端生成，不需要填写 */
    char      szSerial[MAX_SERIAL_LEN];  /* 流水号，由前端生成，不需填写 */
};

/* 删除珍兽应答 */
struct tagDoDelPetRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 绑定收益（AQ）请求 */
struct tagAqDoBindIncomeReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;               /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                   /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];  /* openid */
    char      szRoleId[MAX_ROLEID_LEN];  /* 角色id */
    uint32_t  dwTimes;                   /* 绑定收益时长（秒） */
    char      szReason[MAX_REASON_LEN];  /* 操作原因 */
    uint32_t  dwSource;                  /* 渠道号，由前端生成，不需要填写 */
    char      szSerial[MAX_SERIAL_LEN];  /* 流水号，由前端生成，不需要填写 */
};

/* 绑定收益（AQ）应答 */
struct tagAqDoBindIncomeRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 活动是否完成请求 */
struct tagQueryActivityHasDoneReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;               /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                   /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];  /* openid */
    char      szRoleId[MAX_ROLEID_LEN];  /* 角色ID */
    int32_t   iType;                     /* 活动类型 */
};

/* 活动是否完成应答 */
struct tagQueryActivityHasDoneRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
    int32_t   iStatus;                   /* 活动的状态结果 */
};

/* 获取玩家公会信息请求 */
struct tagQueryGuildInfoReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;               /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                   /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];  /* openid */
    char      szRoleId[MAX_ROLEID_LEN];  /* 角色ID */
};

/* 获取玩家公会信息应答 */
struct tagQueryGuildInfoRsp
{
    int32_t   iResult;                         /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];        /* 返回消息 */
    uint64_t  ullGuildId;                      /* 公会ID */
    char      szGuildName[MAX_GUILDNAME_LEN];  /* 公会全名 */
    uint32_t  dwCurMemberCnt;                  /* 当前人数 */
    uint32_t  dwEnableCnt;                     /* 公会最大容纳人数 */
};

/* 公会名模糊查询请求 */
struct tagQueryGuildFuzzyReq
{
    uint32_t  dwAreaId;                                  /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;                               /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                                   /* 平台： IOS(0)，安卓(1) */
    char      szGuildMatchName[MAX_GUILDMATCHNAME_LEN];  /* 公会名短串 */
};

/* 公会名模糊查询应答 */
struct tagQueryGuildFuzzyRsp
{
    int32_t       iResult;                         /* 结果 */
    char          szRetMsg[MAX_RETMSG_LEN];        /* 返回消息 */
    uint32_t      dwGuildNum;                      /* 匹配到的公会数 */
    uint32_t      dwGuildList_count;               /* 公会列表的最大数量 */
    SGUILDINFO    stGuildList[MAX_GUILDLIST_NUM];  /* 公会列表 */
};

/* 根据公会id获取公会信息请求 */
struct tagQueryIdToGuildInfoReq
{
    uint32_t  dwAreaId;     /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;  /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;      /* 平台： IOS(0)，安卓(1) */
    uint64_t  ullGuildId;   /* 公会id */
};

/* 根据公会id获取公会信息应答 */
struct tagQueryIdToGuildInfoRsp
{
    int32_t   iResult;                         /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];        /* 返回消息 */
    uint64_t  ullGuildId;                      /* 公会id */
    char      szGuildName[MAX_GUILDNAME_LEN];  /* 公会全名 */
    uint32_t  dwCurMemberCnt;                  /* 公会当前人数 */
    uint32_t  dwEnableCnt;                     /* 公会最大容纳人数 */
};

/* 查询公会id获取成员信息列表请求 */
struct tagQueryIdToGuildPlayersReq
{
    uint32_t  dwAreaId;     /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;  /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;      /* 平台： IOS(0)，安卓(1) */
    uint64_t  ullGuildId;   /* 公会id */
    int32_t   iPageNo;      /* 页码 */
};

/* 查询公会id获取成员信息列表应答 */
struct tagQueryIdToGuildPlayersRsp
{
    int32_t             iResult;                                     /* 结果 */
    char                szRetMsg[MAX_RETMSG_LEN];                    /* 返回消息 */
    uint32_t            dwGuildMemberList_count;                     /* 公会成员列表的最大数量 */
    SGUILDMEMBERINFO    stGuildMemberList[MAX_GUILDMEMBERLIST_NUM];  /* 公会成员列表 */
    int32_t             iTotalPageNo;                                /* 总页数 */
};

/* 成长守护（禁玩与解禁）请求 */
struct tagDoSetNoPlayReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信(1),手Q(2) */
    uint8_t   bPlatId;                   /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];  /* OpenId */
    uint8_t   bType;                     /* 禁玩类型（1：禁玩，2：解禁） */
    char      szMsg[MAX_MSG_LEN];        /* 禁玩原因或描述（支持文本信息，建议utf8编码） */
    uint32_t  dwStartTime;               /* 禁玩开始时间（整型时间戳） */
    uint32_t  dwEndTime;                 /* 禁玩结束时间（整型时间戳） */
    uint32_t  dwSource;                  /* 渠道号，由前端生成，不需要填写 */
    char      szSerial[MAX_SERIAL_LEN];  /* 流水号，由前端生成，不需填写 */
};

/* 成长守护（禁玩与解禁）应答 */
struct tagDoSetNoPlayRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 角色id反查openid请求 */
struct tagQueryRoleidToOpenidReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;               /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                   /* 平台： IOS(0)，安卓(1) */
    char      szRoleId[MAX_ROLEID_LEN];  /* 角色ID */
};

/* 角色id反查openid应答 */
struct tagQueryRoleidToOpenidRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
    char      szOpenId[MAX_OPENID_LEN];  /* openid */
    uint32_t  dwPartition;               /* 小区ID */
};

/* 玩家切换位置和场景请求 */
struct tagDoSwitchSceneReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;               /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                   /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];  /* openid */
    char      szRoleId[MAX_ROLEID_LEN];  /* 角色id */
    int32_t   iSceneId;                  /* 场景id */
    int32_t   iCoordinateX;              /* 坐标x */
    int32_t   iCoordinateY;              /* 坐标y */
};

/* 玩家切换位置和场景应答 */
struct tagDoSwitchSceneRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
};

/* 根据openid、物品id查询背包和仓库是否有请求 */
struct tagQueryBagStoreReq
{
    uint32_t  dwAreaId;                  /* 服务器：微信(1),手Q(2) */
    uint32_t  dwPartition;               /* 小区ID：0全部， ***（小区数） */
    uint8_t   bPlatId;                   /* 平台： IOS(0)，安卓(1) */
    char      szOpenId[MAX_OPENID_LEN];  /* openid */
    char      szRoleId[MAX_ROLEID_LEN];  /* 角色ID */
    uint32_t  dwItemId;                  /* 物品id */
};

/* 根据openid、物品id查询背包和仓库是否有应答 */
struct tagQueryBagStoreRsp
{
    int32_t   iResult;                   /* 结果 */
    char      szRetMsg[MAX_RETMSG_LEN];  /* 返回消息 */
    char      szRoleId[MAX_ROLEID_LEN];  /* 角色id */
    char      szOpenId[MAX_OPENID_LEN];  /* openid */
    uint32_t  dwNum;                     /* 数量 */
};


#pragma pack()

#ifdef __cplusplus
}
#endif

#endif